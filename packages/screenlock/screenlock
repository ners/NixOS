#!python3

import subprocess
from i3ipc import Connection
from PIL import Image
import io
import os

sway = Connection()

bgfile = '/tmp/lock.jpg'

def rect_to_area(rect):
    return (rect.x, rect.y, rect.x + rect.width, rect.y + rect.height)

def fetch_windows():
    tree = sway.get_tree()
    bar_rect = tree.rect
    bar_rect.y = bar_rect.height - 30
    areas = [rect_to_area(bar_rect)]
    for node in tree.leaves():
        areas.append(rect_to_area(node.window_rect))
    return areas

def screenshot():
    content = subprocess.run(['grim', '-t', 'ppm', '-'], stdout=subprocess.PIPE).stdout
    return Image.open(io.BytesIO(content))

def obscure_image(image):
  size = image.size
  pixel_size = 8

  if size[0] < pixel_size or size[1] < pixel_size:
    return image

  image = image.resize(
          (int(size[0] / pixel_size), int(size[1] / pixel_size)),
          Image.NEAREST)

  image = image.resize(
          (int(size[0]), int(size[1])),
          Image.NEAREST)
  return image

def obscure(image, areas):
    for area in areas:
        subimage = obscure_image(image.crop(area))
        image.paste(subimage, area)
    return image

def lock_screen():
  subprocess.run([
      'swaylock',
      '-i', bgfile,
      '--indicator-radius', '30',
      '--ring-color', 'FFFFFF',
      '--key-hl-color', '333333'])

if __name__ == '__main__':
  # 1: Take a screenshot.
  scr = screenshot()

  # 2: Get the visible windows.
  areas = fetch_windows()

  # 3: Process and save the screenshot.
  scr = obscure(scr, areas)
  scr.save(bgfile)

  # 4: Lock the screen
  lock_screen()

  # 5: Remove the file
  os.remove(bgfile)
